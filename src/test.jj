PARSER_BEGIN(Example)

/** Simple brace matcher. */
public class Example {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Example parser = new Example(System.in);
    parser.Input();
  }

}

PARSER_END(Example)

/** Root production. */
TOKEN : {
    <OPP: "*" | "/">
}
TOKEN : {
    <OPS: "+" | "-">
}
TOKEN : {
    <#NUMBER: (["0"-"9"])+>
}
TOKEN : {
    <REALNUMBER: <NUMBER>("."<NUMBER>)*>
}
TOKEN : {

}
TOKEN : {
    <EQUAL: "=">
}
SKIP : {
    "\n" | "\t" | "\r"
}
SKIP : {
    " "
}

void Input() throws NumberFormatException:
{
    double res;
}
{
  (res = exp()

  (<EQUAL>
      {System.out.println(res);}
  )*
  )*<EOF>
}

double exp()  throws NumberFormatException:
{
    double first, second;
    Token op;
}
{
    first = expS() (op = <OPS> second = expS()
        {
            if (op.image.equals("+"))
                first += second;
            else if (op.image.equals("-"))
                first -= second;
        }
    )*

    {return first;}
}

double expS()  throws NumberFormatException:
{
    double first, second;
    Token op;
}
{
    first = expP() (op = <OPP> second = expP()
        {
            if (op.image.equals("*"))
                first *= second;
            else if (op.image.equals("/"))
                if (second != 0)
                    first /= second;
                else
                    System.out.println("Cannot divide by zero");
        }
    )*

    {return first;}
}

double expP() throws NumberFormatException:
{
    Token n;
}
{
    n = <REALNUMBER>
    {return Double.parseDouble(n.image);}
}